import os, random, traceback
import config

from pyrogram import filters, Client
from pyrogram.types import Message, ChatJoinRequest, InlineKeyboardButton, InlineKeyboardMarkup 
from pyrogram.errors import FloodWait, InputUserDeactivated, UserIsBlocked, PeerIdInvalid, ChatAdminRequired, UserNotParticipant

from database import add_user, add_group, all_users, all_groups, users, remove_user

app = Client("Auto Approve Bot", api_id=config.API_ID, api_hash=config.API_HASH, bot_token=config.BOT_TOKEN)

welcome=[
    "https://telegra.ph/file/51d04427815840250d03a.mp4",
    "https://telegra.ph/file/f41fddb95dceca7b09cbc.mp4",
    "https://telegra.ph/file/a66716c98fa50b2edd63d.mp4",
    "https://telegra.ph/file/17a8ab5b8eeb0b898d575.mp4",
]

#approve 
@app.on_chat_join_request()
async def approval(app: Client, m: ChatJoinRequest):
    usr = m.from_user
    cht = m.chat
    try:
        add_group(cht.id)
        await app.approve_chat_join_request(cht.id, usr.id)
        gif = random.choice(welcome)
        await app.send_animation(chat_id=usr.id, animation=gif, caption=f" ú·¥á è ·¥õ ú·¥á Ä·¥á {usr.first_name}\n·¥°·¥á ü·¥Ñ·¥è·¥ç·¥á ·¥õ·¥è {cht.title}\n\n{usr.first_name}  è·¥è·¥ú Ä  Ä·¥á«´·¥ú·¥ás·¥õ ·¥õ·¥è ·¥ä·¥è…™…¥ {cht.title}  ú·¥Äs  ô·¥á·¥á…¥ ·¥Ä·¥Ñ·¥Ñ·¥á·¥ò·¥õ·¥á·¥Ö  ô è {app.me.first_name}")
        add_user(usr.id)
    except (UserIsBlocked, PeerIdInvalid):
        pass
    except Exception as err:
        print(str(err))   

#pvtstart
@app.on_message(filters.command("start") & filters.private)
async def start(app: Client, msg: Message):
    if config.FSUB:
        try:
            await app.get_chat_member(chat_id=config.CHANNEL, user_id=msg.from_user.id)
            add_user(msg.from_user.id)
            await msg.reply_photo(photo="https://telegra.ph/file/f394c45e5f2f147a37090.jpg", caption=f" ú·¥á ü ü·¥è {msg.from_user.mention},\n\n‚òâÔ∏é ·¥õ ú…™s …™s {app.me.mention},\n\n‚û≤ ·¥Ä ·¥õ·¥á ü·¥á…¢ Ä·¥Ä·¥ç  ô·¥è·¥õ ·¥ç·¥Ä·¥Ö·¥á “ì·¥è Ä ·¥Ä·¥ú·¥õ·¥è ·¥Ä·¥ò·¥ò Ä·¥è·¥†…™…¥…¢ ·¥ä·¥è…™…¥  Ä·¥á«´·¥ú·¥ás·¥õ …™…¥ …¢ Ä·¥è·¥ú·¥òs ·¥Ä…¥·¥Ö ·¥Ñ ú·¥Ä…¥…¥·¥á üs.\n\n‚û≤ ·¥ä·¥ús·¥õ ·¥Ä·¥Ö·¥Ö {app.me.mention} …™…¥ …¢ Ä·¥è·¥ú·¥òs ·¥Ä…¥·¥Ö ·¥Ñ ú·¥Ä…¥…¥·¥á üs ·¥Ä…¥·¥Ö ·¥ç·¥Ä·¥ã·¥á ·¥Ä·¥Ö·¥ç…™…¥ ·¥°…™·¥õ ú …™…¥·¥†…™·¥õ·¥á ·¥ús·¥á Äs ·¥†…™·¥Ä  ü…™…¥·¥ã  Ä…™…¢ ú·¥õs..",
                                 reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton(f"·¥Ä·¥Ö·¥Ö {app.me.first_name}", url=f"https://t.me/{app.me.username}?startgroup=true")], [InlineKeyboardButton("·¥Ñ ú·¥Ä…¥…¥·¥á ü", url=f"https://t.me/{config.CHANNEL}")]]))
        except UserNotParticipant:
            await msg.reply_text(text=f"To Use {app.me.mention},  è·¥è·¥ú ·¥ç·¥ús·¥õ s·¥ú ôs·¥Ñ Ä…™ ô·¥á ·¥õ·¥è {(await app.get_chat(config.CHANNEL)).title}", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üçÅ ·¥ä·¥è…™…¥ üçÅ", url=f"https://t.me/{config.CHANNEL}")], [InlineKeyboardButton ("**·¥ä·¥è…™…¥·¥á·¥Ö** ‚ùÑÔ∏è", url=f"https://t.me/{app.me.username}?start=start")]]))
        except ChatAdminRequired:
            await app.send_message(text=f"…™'·¥ç …¥·¥è·¥õ ·¥Ä·¥Ö·¥ç…™…¥ …™…¥ “ìs·¥ú ô ·¥Ñ ú·¥Ä·¥õ , ·¥á…¥·¥Ö…™…¥…¢ “ìs·¥ú ô......", chat_id=config.OWNER_ID)
    else:
        await msg.reply_photo(
            photo="https://telegra.ph/file/f394c45e5f2f147a37090.jpg",
            caption=f" ú·¥á ü ü·¥è {msg.from_user.mention},\n\n‚òâÔ∏é ·¥õ ú…™s …™s {app.me.mention},\n\n‚û≤ ·¥Ä ·¥õ·¥á ü·¥á…¢ Ä·¥Ä·¥ç  ô·¥è·¥õ ·¥ç·¥Ä·¥Ö·¥á “ì·¥è Ä ·¥Ä·¥ú·¥õ·¥è ·¥Ä·¥ò·¥ò Ä·¥è·¥†…™…¥…¢ ·¥ä·¥è…™…¥  Ä·¥á«´·¥ú·¥ás·¥õ …™…¥ …¢ Ä·¥è·¥ú·¥ò ·¥Ä…¥·¥Ö ·¥Ñ ú·¥Ä…¥…¥·¥á ü.\n\n‚û≤ ·¥ä·¥ús·¥õ ·¥Ä·¥Ö·¥Ö {app.me.mention} …™…¥ …¢ Ä·¥è·¥ú·¥òs ·¥è Ä ·¥Ñ ú·¥Ä…¥…¥·¥á üs ·¥Ä…¥·¥Ö ·¥ç·¥Ä·¥ã·¥á ·¥Ä·¥Ö·¥ç…™…¥ ·¥°…™·¥õ ú …™…¥·¥†…™·¥õ·¥á ·¥ús·¥á Äs ·¥†…™·¥Ä  ü…™…¥·¥ã  Ä…™…¢ ú·¥õs.",
            reply_markup=InlineKeyboardMarkup(
                [
                    [
                        InlineKeyboardButton(f"üçÅ ·¥Ä·¥Ö·¥Ö {app.me.first_name}", url=f"https://t.me/{app.me.username}?startgroup=true")
                    ],
                    [
                        InlineKeyboardButton("·¥Ñ ú·¥Ä…¥…¥·¥á ü ‚ùÑÔ∏è", url=f"https://t.me/Infinity_Backup")
                    ],
                ]
            )
        )
        add_user(msg.from_user.id)
        

#Gcstart and id
@app.on_message(filters.command("start") & filters.group)
async def gc(app: Client, msg: Message):
    add_group(msg.chat.id)
    add_user(msg.from_user.id)
    await msg.reply_text(text=f"{msg.from_user.mention} s·¥õ·¥Ä Ä·¥õ ·¥ç·¥á …™…¥ ·¥ò Ä…™·¥†·¥Ä·¥õ·¥á “ì·¥è Ä ·¥ç·¥è Ä·¥á …™…¥“ì·¥è...", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üçÅ s·¥õ·¥Ä Ä·¥õ ·¥ç·¥á …™…¥ ·¥ò Ä…™·¥†·¥Ä·¥õ·¥á üå∏", url=f"https://t.me/{app.me.username}?start=start")]]))

#stats
@app.on_message(filters.command("stats") & filters.user(config.OWNER_ID))
async def dbtool(app: Client, m: Message):
    xx = all_users()
    x = all_groups()
    await m.reply_text(text=f"Stats for {app.me.mention}\nüôã‚Äç‚ôÇÔ∏è **·¥ús·¥á Äs :** {xx}\nüë• **·¥Ñ ú·¥Ä·¥õs :** {x}")

#Broadcast
@app.on_message(filters.command("fbroadcast") & filters.user(config.OWNER_ID))
async def fcast(_, m : Message):
    allusers = users
    lel = await m.reply_text("`‚ö°Ô∏è ·¥ò Ä·¥è·¥Ñ·¥áss…™…¥…¢.....`")
    success = 0
    failed = 0
    deactivated = 0
    blocked = 0
    for usrs in allusers.find():
        try
            userid = usrs["user_id"]
            #print(int(userid))
            if m.command[0] == "fbroadcast":
                await m.reply_to_message.forward(int(userid))
            success +=1
        except FloodWait as ex:
            await asyncio.sleep(ex.value)
            if m.command[0] == "fbroadcast":
                await m.reply_to_message.forward(int(userid))
        except InputUserDeactivated:
            deactivated +=1
            remove_user(userid)
        except UserIsBlocked:
            blocked +=1
        except Exception as e:
            print(e)
            failed +=1

    await lel.edit(f"**‚úÖ s·¥ú·¥Ñ·¥Ñ·¥áss“ì·¥ú ü  ô Ä·¥è·¥Ä·¥Ö·¥Ñ·¥Äs·¥õ ·¥õ·¥è {success} ·¥ús·¥á Äs.\n‚ùå “ì·¥Ä…™ ü·¥á·¥Ö ·¥õ·¥è {failed} ·¥ús·¥á Äs.\nüëæ “ì·¥è·¥ú…¥·¥Ö {blocked}  ô ü·¥è·¥Ñ·¥ã·¥á·¥Ö ·¥ús·¥á Äs. \nüëª “ì·¥è·¥ú…¥·¥Ö {deactivated} ·¥Ö·¥á·¥Ä·¥Ñ·¥õ…™·¥†·¥Ä·¥õ·¥á·¥Ö ·¥ús·¥á Äs.**")
    


#run
print(f"Starting {app.name}")
try:
    app.run()
except:
    traceback.print_exc()
